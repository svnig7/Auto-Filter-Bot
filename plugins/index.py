# (c) github - @Rishikesh-Sharma09 ,telegram - https://telegram.me/Rk_botz
# removing credits doesn't make you coder 
# New better way of indexing and skipping added 
import logging
import asyncio
from pyrogram import Client, filters, enums
from pyrogram.errors import FloodWait
from pyrogram.errors.exceptions.bad_request_400 import ChannelInvalid, ChatAdminRequired, UsernameInvalid, UsernameNotModified, UserIsBlocked
from info import ADMINS, LOG_CHANNEL, INDEX_EXTENSIONS
from database.ia_filterdb import save_file
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ForceReply
from utils import temp, get_readable_time
import re, time

lock = asyncio.Lock()

@Client.on_callback_query(filters.regex(r'^index'))
async def index_files(bot, query):
    _, ident, chat, lst_msg_id, skip = query.data.split("#")
    if ident == 'yes':
        msg = query.message
        await msg.edit("s·¥õ·¥Ä Ä·¥õ…™…¥…¢ …™…¥·¥Ö·¥áx…™…¥…¢...")
        try:
            chat = int(chat)
        except:
            chat = chat
        await index_files_to_db(int(lst_msg_id), chat, msg, bot, int(skip))
    elif ident == 'cancel':
        temp.CANCEL = True
        await query.message.edit("·¥õ Ä è…™…¥…¢ ·¥õ·¥è ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü …™…¥·¥Ö·¥áx…™…¥…¢...")

@Client.on_message((filters.forwarded | (filters.regex("(https://)?(t\.me/|telegram\.me/|telegram\.dog/)(c/)?(\d+|[a-zA-Z_0-9]+)/(\d+)$")) & filters.text ) & filters.private & filters.incoming)
async def send_for_index(bot, message):
    if message.text:
        regex = re.compile("(https://)?(t\.me/|telegram\.me/|telegram\.dog/)(c/)?(\d+|[a-zA-Z_0-9]+)/(\d+)$")
        match = regex.match(message.text)
        if not match:
            return await message.reply('…™…¥·¥†·¥Ä ü…™·¥Ö  ü…™…¥·¥ã')
        chat_id = match.group(4)
        last_msg_id = int(match.group(5))
        if chat_id.isnumeric():
            chat_id  = int(("-100" + chat_id))
    elif message.forward_from_chat.type == enums.ChatType.CHANNEL:
        last_msg_id = message.forward_from_message_id
        chat_id = message.forward_from_chat.username or message.forward_from_chat.id
    else:
        return
    try:
        await bot.get_chat(chat_id)
    except ChannelInvalid:
        return await message.reply('·¥õ ú…™s ·¥ç·¥Ä è  ô·¥á ·¥Ä ·¥ò Ä…™·¥†·¥Ä·¥õ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü / …¢ Ä·¥è·¥ú·¥ò. ·¥ç·¥Ä·¥ã·¥á ·¥ç·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ ·¥è·¥†·¥á Ä ·¥õ ú·¥á Ä·¥á ·¥õ·¥è …™…¥·¥Ö·¥áx ·¥õ ú·¥á “ì…™ ü·¥ás.')
    except (UsernameInvalid, UsernameNotModified):
        return await message.reply('…™…¥·¥†·¥Ä ü…™·¥Ö  ü…™…¥·¥ã s·¥ò·¥á·¥Ñ…™“ì…™·¥á·¥Ö.')
    except Exception as e:
        logger.exception(e)
        return await message.reply(f'·¥á Ä Ä·¥è Äs - {e}')
    try:
        k = await bot.get_messages(chat_id, last_msg_id)
    except:
        return await message.reply('·¥ç·¥Ä·¥ã·¥á s·¥ú Ä·¥á ·¥õ ú·¥Ä·¥õ …™ ·¥Ä·¥ç ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü, …™“ì ·¥Ñ ú·¥Ä…¥…¥·¥á ü …™s ·¥ò Ä…™·¥†·¥Ä·¥õ·¥á')
    if k.empty:
        return await message.reply('·¥õ ú…™s ·¥ç·¥Ä è  ô·¥á …¢ Ä·¥è·¥ú·¥ò ·¥Ä…¥·¥Ö …™ ·¥Ä·¥ç …¥·¥è·¥õ ·¥Ä ·¥Ä·¥Ö·¥ç…™…¥ ·¥è“ì ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò.')

    s = await message.reply_text(
        text = "<b>s·¥á…¥·¥Ö ·¥õ ú·¥á s·¥ã…™·¥ò ·¥ç·¥áss·¥Ä…¢·¥á …¥·¥ú·¥ç ô·¥á Ä.\n\n…™“ì ·¥Ö·¥è…¥'·¥õ ·¥°·¥Ä…¥·¥õ ·¥õ·¥è s·¥ã…™·¥ò ·¥Ä…¥ è “ì…™ ü·¥ás s·¥á…¥·¥Ö ·¥ç·¥á üëâ 0 \n</b>",
        reply_to_message_id=message.id,
        reply_markup=ForceReply(True)
    )

@Client.on_message(filters.private & filters.reply) 
async def forceskip(client, message):      
    reply_message = message.reply_to_message
    msg = None  # Initialize msg to avoid UnboundLocalError

    if (reply_message.reply_markup) and isinstance(reply_message.reply_markup, ForceReply):   
        skip_msg = message
        try:
            skip = int(skip_msg.text)
        except:
            await message.reply("…™…¥·¥†·¥Ä ü…™·¥Ö …¥·¥ú·¥ç ô·¥á Ä ·¥ò Ä·¥è·¥†…™·¥Ö·¥á·¥Ö ·¥ús…™…¥…¢ 0 ·¥Äs ·¥Ä s·¥ã…™·¥ò …¥·¥ú·¥ç ô·¥á Ä")
            skip = 0

        msg = await client.get_messages(message.chat.id, reply_message.id) 
        info = msg.reply_to_message

        if info.text:
            regex = re.compile(r"(https://)?(t\.me/|telegram\.me/|telegram\.dog/)(c/)?(\d+|[a-zA-Z_0-9]+)/(\d+)$")
            match = regex.match(info.text)
            if not match:
                return await info.reply('…™…¥·¥†·¥Ä ü…™·¥Ö  ü…™…¥·¥ã')

            chat_id = match.group(4)
            last_msg_id = int(match.group(5))

            if chat_id.isnumeric():
                chat_id = int("-100" + chat_id)

        elif info.forward_from_chat and info.forward_from_chat.type == enums.ChatType.CHANNEL:
            last_msg_id = info.forward_from_message_id
            chat_id = info.forward_from_chat.username or info.forward_from_chat.id
        else:
            return

        # Proceed only if everything was parsed correctly
        if message.from_user.id in ADMINS:      
            buttons = [
                [InlineKeyboardButton(' è·¥ás', callback_data=f'index#yes#{chat_id}#{last_msg_id}#{skip}')],
                [InlineKeyboardButton('·¥Ñ ü·¥ès·¥á', callback_data='close_data')]
            ]
            reply_markup = InlineKeyboardMarkup(buttons)

            # Clean up messages
            await message.delete()
            if msg:
                await msg.delete()

            return await message.reply(
                f'·¥Ö·¥è  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è …™…¥·¥Ö·¥áx ·¥õ ú…™s ·¥Ñ ú·¥Ä…¥…¥·¥á ü / …¢ Ä·¥è·¥ú·¥ò ?\n\n'
                f'·¥Ñ ú·¥Ä·¥õ …™·¥Ö / ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á : <code>{chat_id}</code>\n'
                f' ü·¥Äs·¥õ ·¥ç·¥áss·¥Ä…¢·¥á …™·¥Ö : <code>{last_msg_id}</code>',
                reply_markup=reply_markup
            )

    else:
        await message.reply("…¥·¥è ·¥†·¥Ä ü…™·¥Ö  Ä·¥á·¥ò ü è “ì·¥è·¥ú…¥·¥Ö.")

async def index_files_to_db(lst_msg_id, chat, msg, bot, skip):
    start_time = time.time()
    total_files = 0
    duplicate = 0
    errors = 0
    deleted = 0
    no_media = 0
    unsupported = 0
    current = skip
    
    async with lock:
        try:
            async for message in bot.iter_messages(chat, lst_msg_id, skip):
                time_taken = get_readable_time(time.time()-start_time)
                if temp.CANCEL:
                    temp.CANCEL = False
                    await msg.edit(f"s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö !\n·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö …™…¥ {time_taken}\n\ns·¥Ä·¥†·¥á·¥Ö <code>{total_files}</code> “ì…™ ü·¥ás ·¥õ·¥è ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á !\n·¥Ö·¥ú·¥ò ü…™·¥Ñ·¥Ä·¥õ·¥á “ì…™ ü·¥ás s·¥ã…™·¥ò·¥ò·¥á·¥Ö : <code>{duplicate}</code>\n·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás s·¥ã…™·¥ò·¥ò·¥á·¥Ö : <code>{deleted}</code>\n…¥·¥è…¥-·¥ç·¥á·¥Ö…™·¥Ä ·¥ç·¥áss·¥Ä…¢·¥ás s·¥ã…™·¥ò·¥ò·¥á·¥Ö : <code>{no_media + unsupported}</code>\n·¥ú…¥s·¥ú·¥ò·¥ò·¥è Ä·¥õ·¥á·¥Ö ·¥ç·¥á·¥Ö…™·¥Ä : <code>{unsupported}</code>\n·¥á Ä Ä·¥è Äs ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö : <code>{errors}</code>")
                    return
                current += 1
                if current % 60 == 0:
                    btn = [[
                        InlineKeyboardButton('·¥Ñ·¥Ä…¥·¥Ñ·¥á ü', callback_data=f'index#cancel#{chat}#{lst_msg_id}#{skip}')
                    ]]
                    await msg.edit_text(text=f"·¥õ·¥è·¥õ·¥Ä ü ·¥ç·¥áss·¥Ä…¢·¥ás  Ä·¥á·¥Ñ·¥á…™·¥†·¥á·¥Ö : <code>{current}</code>\n·¥õ·¥è·¥õ·¥Ä ü ·¥ç·¥áss·¥Ä…¢·¥ás s·¥Ä·¥†·¥á·¥Ö : <code>{total_files}</code>\n·¥Ö·¥ú·¥ò ü…™·¥Ñ·¥Ä·¥õ·¥á “ì…™ ü·¥ás s·¥ã…™·¥ò·¥ò·¥á·¥Ö : <code>{duplicate}</code>\n·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás s·¥ã…™·¥ò·¥ò·¥á·¥Ö : <code>{deleted}</code>\n…¥·¥è…¥-·¥ç·¥á·¥Ö…™·¥Ä ·¥ç·¥áss·¥Ä…¢·¥ás s·¥ã…™·¥ò·¥ò·¥á·¥Ö : <code>{no_media + unsupported}</code>\n·¥ú…¥s·¥ú·¥ò·¥ò·¥è Ä·¥õ·¥á·¥Ö ·¥ç·¥á·¥Ö…™·¥Ä : <code>{unsupported}</code>\n·¥á Ä Ä·¥è Äs ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö : <code>{errors}</code>", reply_markup=InlineKeyboardMarkup(btn))
                if message.empty:
                    deleted += 1
                    continue
                elif not message.media:
                    no_media += 1
                    continue
                elif message.media not in [enums.MessageMediaType.VIDEO, enums.MessageMediaType.DOCUMENT]:
                    unsupported += 1
                    continue
                media = getattr(message, message.media.value, None)
                if not media:
                    unsupported += 1
                    continue
                elif not (str(media.file_name).lower()).endswith(tuple(INDEX_EXTENSIONS)):
                    unsupported += 1
                    continue
                media.caption = message.caption
                sts = await save_file(message, media)
                if sts == 'suc':
                    total_files += 1
                elif sts == 'dup':
                    duplicate += 1
                elif sts == 'err':
                    errors += 1
        except Exception as e:
            await msg.reply(f'…™…¥·¥Ö·¥áx ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü·¥á·¥Ö ·¥Ö·¥ú·¥á ·¥õ·¥è ·¥á Ä Ä·¥è Ä - {e}')
        else:
            await msg.edit(f's·¥ú·¥Ñ·¥Ñ·¥ás“ì·¥ú ü ü è s·¥Ä·¥†·¥á·¥Ö <code>{total_files}</code> ·¥õ·¥è ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á !\n·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö …™…¥ {time_taken}\n\n·¥Ö·¥ú·¥ò ü…™·¥Ñ·¥Ä·¥õ·¥á “ì…™ ü·¥ás s·¥ã…™·¥ò·¥ò·¥á·¥Ö : <code>{duplicate}</code>\n·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás s·¥ã…™·¥ò·¥ò·¥á·¥Ö : <code>{deleted}</code>\n…¥·¥è…¥-·¥ç·¥á·¥Ö…™·¥Ä ·¥ç·¥áss·¥Ä…¢·¥ás s·¥ã…™·¥ò·¥ò·¥á·¥Ö : <code>{no_media + unsupported}</code>\n·¥ú…¥s·¥ú·¥ò·¥ò·¥è Ä·¥õ·¥á·¥Ö ·¥ç·¥á·¥Ö…™·¥Ä : <code>{unsupported}</code>\n·¥á Ä Ä·¥è Äs ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö : <code>{errors}</code>')
