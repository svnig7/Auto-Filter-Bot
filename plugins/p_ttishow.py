import random, os, sys
from pyrogram import Client, filters, enums
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from pyrogram.errors.exceptions.bad_request_400 import MessageTooLong, PeerIdInvalid
from info import ADMINS, LOG_CHANNEL, PICS, SUPPORT_LINK, UPDATES_LINK
from database.users_chats_db import db
from database.ia_filterdb import Media
from utils import get_size, temp, get_settings
from Script import script
from pyrogram.errors import ChatAdminRequired


@Client.on_chat_member_updated(filters.group)
async def welcome(bot, message):
    if message.new_chat_member and not message.old_chat_member:
        if message.new_chat_member.user.id == temp.ME:
            buttons = [[
                InlineKeyboardButton('·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás', url=UPDATES_LINK),
                InlineKeyboardButton(' Ä·¥á·¥èÃ®·¥ú·¥ás·¥õ', url=SUPPORT_LINK)
            ]]
            reply_markup=InlineKeyboardMarkup(buttons)
            user = message.from_user.mention if message.from_user else "·¥Ö·¥á·¥Ä Ä"
            await bot.send_photo(chat_id=message.chat.id, photo=random.choice(PICS), caption=f"üëã  ú·¥á ü ü·¥è {user},\n\n·¥õ ú·¥Ä…¥·¥ã  è·¥è·¥ú “ì·¥è Ä ·¥Ä·¥Ö·¥Ö…™…¥…¢ ·¥ç·¥á ·¥õ·¥è ·¥õ ú·¥á <b>'{message.chat.title}'</b> …¢ Ä·¥è·¥ú·¥ò, ·¥Ö·¥è…¥'·¥õ “ì·¥è Ä…¢·¥á·¥õ ·¥õ·¥è ·¥ç·¥Ä·¥ã·¥á ·¥ç·¥á ·¥Ä·¥Ö·¥ç…™…¥. …™“ì  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥ã…¥·¥è·¥° ·¥ç·¥è Ä·¥á, ·¥Äs·¥ã ·¥õ ú·¥á  Ä·¥á·¥èÃ®·¥ú·¥ás·¥õ …¢ Ä·¥è·¥ú·¥ò. üòò</b>", reply_markup=reply_markup)
            return
        settings = await get_settings(message.chat.id)
        if settings["welcome"]:
            WELCOME = settings['welcome_text']
            welcome_msg = WELCOME.format(
                mention = message.new_chat_member.user.mention,
                title = message.chat.title
            )
            await bot.send_message(chat_id=message.chat.id, text=welcome_msg)


@Client.on_message(filters.command('restart') & filters.user(ADMINS))
async def restart_bot(bot, message):
    msg = await message.reply(" Ä·¥ás·¥õ·¥Ä Ä·¥õ…™…¥…¢...")
    with open('restart.txt', 'w+') as file:
        file.write(f"{msg.chat.id}\n{msg.id}")
    os.execl(sys.executable, sys.executable, "bot.py")

@Client.on_message(filters.command('leave') & filters.user(ADMINS))
async def leave_a_chat(bot, message):
    if len(message.command) == 1:
        return await message.reply('')
    r = message.text.split(None)
    if len(r) > 2:
        reason = message.text.split(None, 2)[2]
        chat = message.text.split(None, 2)[1]
    else:
        chat = message.command[1]
        reason = "…¥·¥è  Ä·¥á·¥Äs·¥è…¥ ·¥ò Ä·¥è·¥†…™·¥Ö·¥á·¥Ö."
    try:
        chat = int(chat)
    except:
        chat = chat
    try:
        buttons = [[
            InlineKeyboardButton(' Ä·¥á·¥èÃ®·¥ú·¥ás·¥õ …¢ Ä·¥è·¥ú·¥ò', url=SUPPORT_LINK)
        ]]
        reply_markup=InlineKeyboardMarkup(buttons)
        await bot.send_message(
            chat_id=chat,
            text=f' ú·¥á ü ü·¥è “ì Ä…™·¥á…¥·¥Ös,\n·¥ç è ·¥è·¥°…¥·¥á Ä  ú·¥Äs ·¥õ·¥è ü·¥Ö ·¥ç·¥á ·¥õ·¥è  ü·¥á·¥Ä·¥†·¥á “ì Ä·¥è·¥ç …¢ Ä·¥è·¥ú·¥ò s·¥è …™ …¢·¥è ! …™“ì  è·¥è·¥ú …¥·¥á·¥á·¥Ö, ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥Ä…¢·¥Ä…™…¥ ·¥Ä…¥·¥Ö ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç è  Ä·¥á·¥èÃ®·¥ú·¥ás·¥õ …¢ Ä·¥è·¥ú·¥ò.\n Ä·¥á·¥Äs·¥è…¥ - <code>{reason}</code>',
            reply_markup=reply_markup,
        )
        await bot.leave_chat(chat)
        await message.reply(f"<b>‚úÖÔ∏è s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è  ô·¥è·¥õ  ü·¥á“ì·¥õ “ì Ä·¥è·¥ç ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò - `{chat}`</b>")
    except Exception as e:
        await message.reply(f'·¥á Ä Ä·¥è Ä - {e}')

@Client.on_message(filters.command('ban_grp') & filters.user(ADMINS))
async def disable_chat(bot, message):
    if len(message.command) == 1:
        return await message.reply('…¢…™·¥†·¥á ·¥ç·¥á ·¥Ä ·¥Ñ ú·¥Ä·¥õ …™·¥Ö')
    r = message.text.split(None)
    if len(r) > 2:
        reason = message.text.split(None, 2)[2]
        chat = message.text.split(None, 2)[1]
    else:
        chat = message.command[1]
        reason = "…¥·¥è  Ä·¥á·¥Äs·¥è…¥ ·¥ò Ä·¥è·¥†…™·¥Ö·¥á·¥Ö."
    try:
        chat_ = int(chat)
    except:
        return await message.reply('…¢…™·¥†·¥á ·¥ç·¥á ·¥Ä ·¥†·¥Ä ü…™·¥Ö ·¥Ñ ú·¥Ä·¥õ …™·¥Ö')
    cha_t = await db.get_chat(int(chat_))
    if not cha_t:
        return await message.reply("·¥Ñ ú·¥Ä·¥õ …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö …™…¥ ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á")
    if cha_t['is_disabled']:
        return await message.reply(f"·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö.\n Ä·¥á·¥Äs·¥è…¥ - <code>{cha_t['reason']}</code>")
    await db.disable_chat(int(chat_), reason)
    temp.BANNED_CHATS.append(int(chat_))
    await message.reply('·¥Ñ ú·¥Ä·¥õ s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö')
    try:
        buttons = [[
            InlineKeyboardButton(' Ä·¥á·¥èÃ®·¥ú·¥ás·¥õ …¢ Ä·¥è·¥ú·¥ò', url=SUPPORT_LINK)
        ]]
        reply_markup=InlineKeyboardMarkup(buttons)
        await bot.send_message(
            chat_id=chat_, 
            text=f' ú·¥á ü ü·¥è “ì Ä…™·¥á…¥·¥Ös,\n·¥ç è ·¥è·¥°…¥·¥á Ä  ú·¥Äs ·¥õ·¥è ü·¥Ö ·¥ç·¥á ·¥õ·¥è  ü·¥á·¥Ä·¥†·¥á “ì Ä·¥è·¥ç …¢ Ä·¥è·¥ú·¥ò s·¥è …™ …¢·¥è ! …™“ì  è·¥è·¥ú …¥·¥á·¥á·¥Ö, ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥Ä…¢·¥Ä…™…¥ ·¥Ä…¥·¥Ö ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç è  Ä·¥á·¥èÃ®·¥ú·¥ás·¥õ …¢ Ä·¥è·¥ú·¥ò.\n Ä·¥á·¥Äs·¥è…¥ - <code>{reason}</code>',
            reply_markup=reply_markup)
        await bot.leave_chat(chat_)
    except Exception as e:
        await message.reply(f"·¥á Ä Ä·¥è Ä - {e}")

@Client.on_message(filters.command('unban_grp') & filters.user(ADMINS))
async def re_enable_chat(bot, message):
    if len(message.command) == 1:
        return await message.reply('…¢…™·¥†·¥á ·¥ç·¥á ·¥Ä ·¥Ñ ú·¥Ä·¥õ …™·¥Ö')
    chat = message.command[1]
    try:
        chat_ = int(chat)
    except:
        return await message.reply('…¢…™·¥†·¥á ·¥ç·¥á ·¥Ä ·¥†·¥Ä ü…™·¥Ö ·¥Ñ ú·¥Ä·¥õ …™·¥Ö')
    sts = await db.get_chat(int(chat))
    if not sts:
        return await message.reply("·¥Ñ ú·¥Ä·¥õ …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö …™…¥ ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á")
    if not sts.get('is_disabled'):
        return await message.reply('·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ …™s …¥·¥è·¥õ  è·¥á·¥õ ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö.')
    await db.re_enable_chat(int(chat_))
    temp.BANNED_CHATS.remove(int(chat_))
    await message.reply("·¥Ñ ú·¥Ä·¥õ s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è  Ä·¥á-·¥á…¥·¥Ä ô ü·¥á·¥Ö")

@Client.on_message(filters.command('invite_link') & filters.user(ADMINS))
async def gen_invite_link(bot, message):
    if len(message.command) == 1:
        return await message.reply('…¢…™·¥†·¥á ·¥ç·¥á ·¥Ä ·¥Ñ ú·¥Ä·¥õ …™·¥Ö')
    chat = message.command[1]
    try:
        chat = int(chat)
    except:
        return await message.reply('…¢…™·¥†·¥á ·¥ç·¥á ·¥Ä ·¥†·¥Ä ü…™·¥Ö ·¥Ñ ú·¥Ä·¥õ …™·¥Ö')
    try:
        link = await bot.create_chat_invite_link(chat)
    except Exception as e:
        return await message.reply(f'·¥á Ä Ä·¥è Ä - {e}')
    await message.reply(f' ú·¥á Ä·¥á …™s  è·¥è·¥ú Ä …™…¥·¥†…™·¥õ·¥á  ü…™…¥·¥ã : {link.invite_link}')

@Client.on_message(filters.command('ban_user') & filters.user(ADMINS))
async def ban_a_user(bot, message):
    if len(message.command) == 1:
        return await message.reply('…¢…™·¥†·¥á ·¥ç·¥á ·¥Ä ·¥ús·¥á Ä …™·¥Ö ·¥è Ä ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á')
    r = message.text.split(None)
    if len(r) > 2:
        reason = message.text.split(None, 2)[2]
        chat = message.text.split(None, 2)[1]
    else:
        chat = message.command[1]
        reason = "…¥·¥è  Ä·¥á·¥Äs·¥è…¥ ·¥ò Ä·¥è·¥†…™·¥Ö·¥á·¥Ö."
    try:
        chat = int(chat)
    except:
        pass
    try:
        k = await bot.get_users(chat)
    except Exception as e:
        return await message.reply(f'·¥á Ä Ä·¥è Ä - {e}')
    else:
        if k.id in ADMINS:
            return await message.reply(' è·¥è·¥ú ·¥Ä·¥Ö·¥ç…™…¥s')
        jar = await db.get_ban_status(k.id)
        if jar['is_banned']:
            return await message.reply(f"{k.mention} …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è  ô·¥Ä…¥…¥·¥á·¥Ö.\n Ä·¥á·¥Äs·¥è…¥ - <code>{jar['ban_reason']}</code>")
        await db.ban_user(k.id, reason)
        temp.BANNED_USERS.append(k.id)
        await message.reply(f"s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è  ô·¥Ä…¥…¥·¥á·¥Ö {k.mention}")
   
@Client.on_message(filters.command('unban_user') & filters.user(ADMINS))
async def unban_a_user(bot, message):
    if len(message.command) == 1:
        return await message.reply('…¢…™·¥†·¥á ·¥ç·¥á ·¥Ä ·¥ús·¥á Ä …™·¥Ö ·¥è Ä ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á')
    r = message.text.split(None)
    if len(r) > 2:
        chat = message.text.split(None, 2)[1]
    else:
        chat = message.command[1]
    try:
        chat = int(chat)
    except:
        pass
    try:
        k = await bot.get_users(chat)
    except Exception as e:
        return await message.reply(f'·¥á Ä Ä·¥è Ä - {e}')
    else:
        jar = await db.get_ban_status(k.id)
        if not jar['is_banned']:
            return await message.reply(f"{k.mention} …™s …¥·¥è·¥õ  è·¥á·¥õ  ô·¥Ä…¥…¥·¥á·¥Ö.")
        await db.remove_ban(k.id)
        temp.BANNED_USERS.remove(k.id)
        await message.reply(f"s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥ú…¥ ô·¥Ä…¥…¥·¥á·¥Ö {k.mention}")
    
@Client.on_message(filters.command('users') & filters.user(ADMINS))
async def list_users(bot, message):
    raju = await message.reply('…¢·¥á·¥õ·¥õ…™…¥…¢  ü…™s·¥õ ·¥è“ì ·¥ús·¥á Äs')
    users = await db.get_all_users()
    out = "·¥ús·¥á Äs s·¥Ä·¥†·¥á·¥Ö …™…¥ ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á ·¥Ä Ä·¥á :\n\n"
    async for user in users:
        out += f"**…¥·¥Ä·¥ç·¥á :** {user['name']}\n**…™·¥Ö :** `{user['id']}`"
        if user['ban_status']['is_banned']:
            out += ' (  ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Äs )'
        if user['verify_status']['is_verified']:
            out += ' ( ·¥†·¥á Ä…™“ì…™·¥á·¥Ö ·¥ús·¥á Äs )'
        out += '\n\n'
    try:
        await raju.edit_text(out)
    except MessageTooLong:
        with open('users.txt', 'w+') as outfile:
            outfile.write(out)
        await message.reply_document('users.txt', caption=" ü…™s·¥õ ·¥è“ì ·¥ús·¥á Äs")
        await raju.delete()
        os.remove('users.txt')

@Client.on_message(filters.command('chats') & filters.user(ADMINS))
async def list_chats(bot, message):
    raju = await message.reply('…¢·¥á·¥õ·¥õ…™…¥…¢  ü…™s·¥õ ·¥è“ì ·¥Ñ ú·¥Ä·¥õs')
    chats = await db.get_all_chats()
    out = "·¥Ñ ú·¥Ä·¥õs s·¥Ä·¥†·¥á·¥Ö …™…¥ ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á ·¥Ä Ä·¥á :\n\n"
    async for chat in chats:
        out += f"**·¥õ…™·¥õ ü·¥á :** {chat['title']}\n**…™·¥Ö :** `{chat['id']}`"
        if chat['chat_status']['is_disabled']:
            out += ' ( ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õs )'
        out += '\n\n'
    try:
        await raju.edit_text(out)
    except MessageTooLong:
        with open('chats.txt', 'w+') as outfile:
            outfile.write(out)
        await message.reply_document('chats.txt', caption=" ü…™s·¥õ ·¥è“ì ·¥Ñ ú·¥Ä·¥õs")
        await raju.delete()
        os.remove('chats.txt')
