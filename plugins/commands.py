import os
import logging
import random, string
import asyncio
import time
import datetime
import requests
from Script import script
from pyrogram import Client, filters, enums
from pyrogram.errors import ChatAdminRequired, FloodWait, ButtonDataInvalid
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from database.ia_filterdb import Media, get_file_details, unpack_new_file_id, delete_files
from database.users_chats_db import db
from info import STICKERS_IDS, SUPPORT_GROUP, INDEX_CHANNELS, ADMINS, IS_VERIFY, VERIFY_TUTORIAL, VERIFY_EXPIRE, TUTORIAL, SHORTLINK_API, SHORTLINK_URL, AUTH_CHANNEL, DELETE_TIME, SUPPORT_LINK, UPDATES_LINK, LOG_CHANNEL, PICS, PROTECT_CONTENT, IS_STREAM, IS_FSUB, PAYMENT_QR
from utils import get_settings, delayed_delete, get_size, is_subscribed, is_check_admin, get_shortlink, get_verify_status, update_verify_status, save_group_settings, temp, get_readable_time, get_wish, get_seconds

@Client.on_message(filters.command("ask") & filters.incoming) #add your support grp to use this
async def aiRes(_, message):
    if message.chat.id == SUPPORT_GROUP:
        asked = message.text.split(None, 1)[1]
        if not asked:
            return await message.reply("·¥Äs·¥ã s·¥è·¥ç·¥á·¥õ ú…™…¥…¢ ·¥Ä“ì·¥õ·¥á Ä ·¥Äs·¥ã ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö !")
        #thinkStc = await message.reply_sticker(sticker=random.choice(STICKERS_IDS))
        url = f"https://bisal-ai-api.vercel.app/biisal" 
        res = requests.post(url , data={'query' : asked})
        if res.status_code == 200:
            response = res.json().get("response")
            #await thinkStc.delete()
            await message.reply(f"<b> ú·¥á è {message.from_user.mention()},\n{response.lstrip() if response.startswith(' ') else response}</b>")
        else:
            #await thinkStc.delete()
            await message.reply("·¥ç·¥Ä·¥ús·¥Ä·¥ç ·¥ã ú·¥Ä Ä·¥Ä ô  ú·¥Ä…™ ! ·¥õ ú·¥è·¥Ö…™ ·¥Ö·¥á Ä ·¥ç·¥á…™…¥ ·¥õ Ä è ·¥ã Ä·¥á !\n·¥è Ä  Ä·¥á·¥ò·¥è Ä·¥õ ·¥õ·¥è ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä.")
    else:
        btn = [[
            InlineKeyboardButton('üí°  Ä·¥á·¥èÃ®·¥ú·¥ás·¥õ …¢ Ä·¥è·¥ú·¥ò üí°', url=SUPPORT_LINK)
        ]]
        await message.reply(f"<b> ú·¥á è {message.from_user.mention},\n\n·¥ò ü·¥á·¥Äs·¥á ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥  Ä·¥á·¥èÃ®·¥ú·¥ás·¥õ …¢ Ä·¥è·¥ú·¥ò.</b>", reply_markup=InlineKeyboardMarkup(btn))
        
@Client.on_message(filters.command("start") & filters.incoming)
async def start(client, message):
    botid = client.me.id
    if message.chat.type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        if not await db.get_chat(message.chat.id):
            total = await client.get_chat_members_count(message.chat.id)
            username = f'@{message.chat.username}' if message.chat.username else 'Private'
            await client.send_message(LOG_CHANNEL, script.NEW_GROUP_TXT.format(message.chat.title, message.chat.id, username, total))       
            await db.add_chat(message.chat.id, message.chat.title)
        wish = get_wish()
        btn = [[
            InlineKeyboardButton('‚ö°Ô∏è ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás ·¥Ñ ú·¥Ä…¥…¥·¥á ü ‚ö°Ô∏è', url=UPDATES_LINK),
            InlineKeyboardButton('üí°  Ä·¥á·¥èÃ®·¥ú·¥ás·¥õ …¢ Ä·¥è·¥ú·¥ò üí°', url=SUPPORT_LINK)
        ]]
        await message.reply(text=f"<b> ú·¥á è {message.from_user.mention}, <i>{wish}</i>\n ú·¥è·¥° ·¥Ñ·¥Ä…¥ …™  ú·¥á ü·¥ò  è·¥è·¥ú??</b>", reply_markup=InlineKeyboardMarkup(btn))
        return 
        
    if not await db.is_user_exist(message.from_user.id):
        await db.add_user(message.from_user.id, message.from_user.first_name)
        await client.send_message(LOG_CHANNEL, script.NEW_USER_TXT.format(message.from_user.mention, message.from_user.id))

    verify_status = await get_verify_status(message.from_user.id)
    if verify_status['is_verified'] and VERIFY_EXPIRE < (time.time() - verify_status['verified_time']):
        await update_verify_status(message.from_user.id, is_verified=False)
    
    if (len(message.command) != 2) or (len(message.command) == 2 and message.command[1] == 'start'):
        buttons = [[
            InlineKeyboardButton('‚§¨ ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ‚§¨', url=f'http://t.me/{temp.U_NAME}?startgroup=true')
                ],[
                    InlineKeyboardButton('üåø ·¥Ä ô·¥è·¥ú·¥õ', callback_data="my_about"),
                    InlineKeyboardButton('üë§ ·¥è·¥°…¥·¥á Ä', callback_data='my_owner')
                ],[
                    InlineKeyboardButton('üçÅ  ú·¥á ü·¥ò', callback_data='help'),
                    InlineKeyboardButton('üîê ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç', callback_data='buy_premium')
                ],[
                    InlineKeyboardButton('üí∞ ·¥á·¥Ä Ä…¥ ·¥ç·¥è…¥·¥á è üí∞', callback_data='earn')
                  ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await message.reply_photo(
            photo=random.choice(PICS),
            caption=script.START_TXT.format(message.from_user.mention, get_wish()),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
        return


    mc = message.command[1]

    if mc.startswith('verify'):
        _, token = mc.split("_", 1)
        verify_status = await get_verify_status(message.from_user.id)
        if verify_status['verify_token'] != token:
            return await message.reply(" è·¥è·¥ú Ä ·¥†·¥á Ä…™“ì è ·¥õ·¥è·¥ã·¥á…¥ …™s …™…¥·¥†·¥Ä ü…™·¥Ö.")
        await update_verify_status(message.from_user.id, is_verified=True, verified_time=time.time())
        if verify_status["link"] == "":
            reply_markup = None
        else:
            btn = [[
                InlineKeyboardButton("üìå …¢·¥á·¥õ “ì…™ ü·¥á üìå", url=f'https://t.me/{temp.U_NAME}?start={verify_status["link"]}')
            ]]
            reply_markup = InlineKeyboardMarkup(btn)
        await message.reply(f"‚úÖ  è·¥è·¥ú ·¥Ä Ä·¥á s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥†·¥á Ä…™“ì…™·¥á·¥Ö ·¥ú…¥·¥õ…™ ü : {get_readable_time(VERIFY_EXPIRE)}", reply_markup=reply_markup, protect_content=True)
        return
    
    verify_status = await get_verify_status(message.from_user.id)
    if not await db.has_premium_access(message.from_user.id):
        if IS_VERIFY and not verify_status['is_verified']:
            token = ''.join(random.choices(string.ascii_letters + string.digits, k=10))
            await update_verify_status(message.from_user.id, verify_token=token, link="" if mc == 'inline_verify' else mc)
            link = await get_shortlink(SHORTLINK_URL, SHORTLINK_API, f'https://t.me/{temp.U_NAME}?start=verify_{token}')
            btn = [[
                InlineKeyboardButton("üßø ·¥†·¥á Ä…™“ì è üßø", url=link)
            ],[
                InlineKeyboardButton('üó≥ ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü üó≥', url=VERIFY_TUTORIAL)
            ]]
            await message.reply(" è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥†·¥á Ä…™“ì…™·¥á·¥Ö ·¥õ·¥è·¥Ö·¥Ä è ! ·¥ã…™…¥·¥Ö ü è ·¥†·¥á Ä…™“ì è …¥·¥è·¥°. üîê", reply_markup=InlineKeyboardMarkup(btn), protect_content=True)
            return
    else:
        pass

    settings = await get_settings(int(mc.split("_", 2)[1]))
    if settings.get('is_fsub', IS_FSUB):
        btn = await is_subscribed(client, message, settings['fsub'])
        if btn:
            btn.append(
                [InlineKeyboardButton("üîÅ ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥ üîÅ", callback_data=f"checksub#{mc}")]
            )
            reply_markup = InlineKeyboardMarkup(btn)
            await message.reply_photo(
                photo=random.choice(PICS),
                caption=f"üëã Hello {message.from_user.mention},\n\n·¥ò ü·¥á·¥Äs·¥á ·¥ä·¥è…™…¥ ·¥ç è ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥Ä…¥·¥Ö ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥. üòá",
                reply_markup=reply_markup,
                parse_mode=enums.ParseMode.HTML
            )
            return 
        
    if mc.startswith('all'):
        _, grp_id, key = mc.split("_", 2)
        files = temp.FILES.get(key)
        if not files:
            return await message.reply('…¥·¥è s·¥ú·¥Ñ ú ·¥Ä ü ü “ì…™ ü·¥á ·¥áx…™s·¥õ !')
        settings = await get_settings(int(grp_id))
        for file in files:
            CAPTION = settings['caption']
            f_caption = CAPTION.format(
                file_caption=files.caption or file.file_name
            )
            if settings.get('is_stream', IS_STREAM):
                btn = [[
                    InlineKeyboardButton("‚úõ ·¥°·¥Ä·¥õ·¥Ñ ú & ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ‚úõ", callback_data=f"stream#{file.file_id}")
                ],[
                    InlineKeyboardButton('‚ö°Ô∏è ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás ‚ö°Ô∏è', url=UPDATES_LINK),
                    InlineKeyboardButton('üí°  Ä·¥á·¥èÃ®·¥ú·¥ás·¥õ üí°', url=SUPPORT_LINK)
                ],[
                    InlineKeyboardButton('‚ÅâÔ∏è ·¥Ñ ü·¥ès·¥á ‚ÅâÔ∏è', callback_data='close_data')
                ]]
            else:
                btn = [[
                    InlineKeyboardButton('‚ö°Ô∏è ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás ‚ö°Ô∏è', url=UPDATES_LINK),
                    InlineKeyboardButton('üí°  Ä·¥á·¥èÃ®·¥ú·¥ás·¥õ üí°', url=SUPPORT_LINK)
                ],[
                    InlineKeyboardButton('‚ÅâÔ∏è ·¥Ñ ü·¥ès·¥á ‚ÅâÔ∏è', callback_data='close_data')
                ]]
            sent_message = await client.send_cached_media(
                chat_id=message.from_user.id,
                file_id=file.file_id,
                caption=f_caption,
                protect_content=settings['file_secure'],
                reply_markup=InlineKeyboardMarkup(btn)
            )
            asyncio.create_task(delayed_delete(client, sent_message, 600))
        await message.reply("<b>·¥õ ú…™s “ì…™ ü·¥á ·¥°…™ ü ü  ô·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥Ä“ì·¥õ·¥á Ä 10 ·¥ç…™…¥ s·¥è ·¥ò ü·¥á·¥Äs·¥á “ì·¥è Ä·¥°·¥Ä Ä·¥Ö …™·¥õ …™…¥  è·¥è·¥ú Ä s·¥Ä·¥†·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás.</b>")                                   
        return

    type_, grp_id, file_id = mc.split("_", 2)
    files_ = await get_file_details(file_id)
    if not files_:
        return await message.reply('No Such File Exist!')
    files = files_[0]
    settings = await get_settings(int(grp_id))
    if type_ != 'shortlink' and settings['shortlink']:
        if not await db.has_premium_access(message.from_user.id):
            link = await get_shortlink(settings['url'], settings['api'], f"https://t.me/{temp.U_NAME}?start=shortlink_{grp_id}_{file_id}")
            btn = [[
                InlineKeyboardButton("‚ôªÔ∏è …¢·¥á·¥õ “ì…™ ü·¥á ‚ôªÔ∏è", url=link)
            ],[
                InlineKeyboardButton("üìç  ú·¥è·¥° ·¥õ·¥è ·¥è·¥ò·¥á…¥  ü…™…¥·¥ã üìç", url=settings['tutorial'])
            ]]
            await message.reply(f"[{get_size(files.file_size)}] {files.file_name}\n\n è·¥è·¥ú Ä “ì…™ ü·¥á …™s  Ä·¥á·¥Ä·¥Ö è, ·¥ò ü·¥á·¥Äs·¥á …¢·¥á·¥õ ·¥ús…™…¥…¢ ·¥õ ú…™s  ü…™…¥·¥ã. üëç", reply_markup=InlineKeyboardMarkup(btn), protect_content=True)
            return
    else:
        pass
        
    CAPTION = settings['caption']
    f_caption = CAPTION.format(
        file_caption=files.caption or file.file_name
    )
    if settings.get('is_stream', IS_STREAM):
        btn = [[
            InlineKeyboardButton("‚úõ ·¥°·¥Ä·¥õ·¥Ñ ú & ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ‚úõ", callback_data=f"stream#{file_id}")
        ],[
            InlineKeyboardButton('‚ö°Ô∏è ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás ‚ö°Ô∏è', url=UPDATES_LINK),
            InlineKeyboardButton('üí°  Ä·¥á·¥èÃ®·¥ú·¥ás·¥õ üí°', url=SUPPORT_LINK)
        ],[
            InlineKeyboardButton('‚ÅâÔ∏è ·¥Ñ ü·¥ès·¥á ‚ÅâÔ∏è', callback_data='close_data')
        ]]
    else:
        btn = [[
            InlineKeyboardButton('‚ö°Ô∏è ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás ‚ö°Ô∏è', url=UPDATES_LINK),
            InlineKeyboardButton('üí°  Ä·¥á·¥èÃ®·¥ú·¥ás·¥õ üí°', url=SUPPORT_LINK)
        ],[
            InlineKeyboardButton('‚ÅâÔ∏è ·¥Ñ ü·¥ès·¥á ‚ÅâÔ∏è', callback_data='close_data')
        ]]
    sent_message = await client.send_cached_media(
        chat_id=message.from_user.id,
        file_id=file_id,
        caption=f_caption,
        protect_content=settings['file_secure'],
        reply_markup=InlineKeyboardMarkup(btn)
    )
    await sent_message.reply("<b>·¥õ ú…™s “ì…™ ü·¥á ·¥°…™ ü ü  ô·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥Ä“ì·¥õ·¥á Ä 10 ·¥ç…™…¥ s·¥è ·¥ò ü·¥á·¥Äs·¥á “ì·¥è Ä·¥°·¥Ä Ä·¥Ö …™·¥õ …™…¥  è·¥è·¥ú Ä s·¥Ä·¥†·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás.</b>")
    asyncio.create_task(delayed_delete(client, sent_message, 600))

@Client.on_message(filters.command('index_channels') & filters.user(ADMINS))
async def channels_info(bot, message):
    """s·¥á…¥·¥Ö  ô·¥Äs…™·¥Ñ …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ·¥è“ì …™…¥·¥Ö·¥áx ·¥Ñ ú·¥Ä…¥…¥·¥á üs"""
    ids = INDEX_CHANNELS
    if not ids:
        return await message.reply("…¥·¥è·¥õ s·¥á·¥õ INDEX_CHANNELS")

    text = '**…™…¥·¥Ö·¥áx·¥á·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á üs :**\n\n'
    for id in ids:
        chat = await bot.get_chat(id)
        text += f'{chat.title}\n'
    text += f'\n**·¥õ·¥è·¥õ·¥Ä ü :** {len(ids)}'
    await message.reply(text)

@Client.on_message(filters.command('stats') & filters.user(ADMINS))
async def stats(bot, message):
    msg = await message.reply('·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ...')
    files = await Media.count_documents()
    users = await db.total_users_count()
    chats = await db.total_chat_count()
    u_size = get_size(await db.get_db_size())
    f_size = get_size(536870912 - await db.get_db_size())
    uptime = get_readable_time(time.time() - temp.START_TIME)
    await msg.edit(script.STATUS_TXT.format(files, users, chats, u_size, f_size, uptime))    
    
@Client.on_message(filters.command('settings'))
async def settings(client, message):
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply("<b> è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥  è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö !</b>")
    chat_type = message.chat.type
    if chat_type not in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        return await message.reply_text("·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥ò.")
    grp_id = message.chat.id
    if not await is_check_admin(client, grp_id, message.from_user.id):
        return await message.reply_text(' è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò.')
    settings = await get_settings(grp_id)
    if settings is not None:
        buttons = [[
            InlineKeyboardButton('·¥Ä·¥ú·¥õ·¥è “ì…™ ü·¥õ·¥á Ä', callback_data=f'setgs#auto_filter#{settings["auto_filter"]}#{grp_id}'),
            InlineKeyboardButton('‚úÖ  è·¥ás' if settings["auto_filter"] else '‚ùå …¥·¥è', callback_data=f'setgs#auto_filter#{settings["auto_filter"]}#{grp_id}')
        ],[
            InlineKeyboardButton('“ì…™ ü·¥á s·¥á·¥Ñ·¥ú Ä·¥á', callback_data=f'setgs#file_secure#{settings["file_secure"]}#{grp_id}'),
            InlineKeyboardButton('‚úÖ  è·¥ás' if settings["file_secure"] else '‚ùå …¥·¥è', callback_data=f'setgs#file_secure#{settings["file_secure"]}#{grp_id}')
        ],[
            InlineKeyboardButton('…™·¥ç·¥Ö ô ·¥ò·¥ès·¥õ·¥á Ä', callback_data=f'setgs#imdb#{settings["imdb"]}#{grp_id}'),
            InlineKeyboardButton('‚úÖ  è·¥ás' if settings["imdb"] else '‚ùå …¥·¥è', callback_data=f'setgs#imdb#{settings["imdb"]}#{grp_id}')
        ],[
            InlineKeyboardButton('s·¥ò·¥á ü ü…™…¥…¢ ·¥Ñ ú·¥á·¥Ñ·¥ã', callback_data=f'setgs#spell_check#{settings["spell_check"]}#{grp_id}'),
            InlineKeyboardButton('‚úÖ  è·¥ás' if settings["spell_check"] else '‚ùå …¥·¥è', callback_data=f'setgs#spell_check#{settings["spell_check"]}#{grp_id}')
        ],[
            InlineKeyboardButton('·¥Ä·¥ú·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á', callback_data=f'setgs#auto_delete#{settings["auto_delete"]}#{grp_id}'),
            InlineKeyboardButton(f'{get_readable_time(DELETE_TIME)}' if settings["auto_delete"] else '‚ùå …¥·¥è', callback_data=f'setgs#auto_delete#{settings["auto_delete"]}#{grp_id}')
        ],[
            InlineKeyboardButton('·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á', callback_data=f'setgs#welcome#{settings["welcome"]}#{grp_id}',),
            InlineKeyboardButton('‚úÖ  è·¥ás' if settings["welcome"] else '‚ùå …¥·¥è', callback_data=f'setgs#welcome#{settings["welcome"]}#{grp_id}'),
        ],[
            InlineKeyboardButton('s ú·¥è Ä·¥õ ü…™…¥·¥ã', callback_data=f'setgs#shortlink#{settings["shortlink"]}#{grp_id}'),
            InlineKeyboardButton('‚úÖ  è·¥ás' if settings["shortlink"] else '‚ùå …¥·¥è', callback_data=f'setgs#shortlink#{settings["shortlink"]}#{grp_id}'),
        ],[
            InlineKeyboardButton(' Ä·¥ás·¥ú ü·¥õ ·¥ò·¥Ä…¢·¥á', callback_data=f'setgs#links#{settings["links"]}#{str(grp_id)}'),
            InlineKeyboardButton('‚õì  ü…™…¥·¥ã' if settings["links"] else 'üß≤  ô·¥ú·¥õ·¥õ·¥è…¥', callback_data=f'setgs#links#{settings["links"]}#{str(grp_id)}')
        ],[
            InlineKeyboardButton('“ìs·¥ú ô', callback_data=f'setgs#is_fsub#{settings.get("is_fsub", IS_FSUB)}#{str(grp_id)}'),
            InlineKeyboardButton('‚úÖ ·¥è…¥' if settings.get("is_fsub", IS_FSUB) else '‚ùå ·¥è“ì“ì', callback_data=f'setgs#is_fsub#{settings.get("is_fsub", IS_FSUB)}#{str(grp_id)}')
        ],[
            InlineKeyboardButton('s·¥õ Ä·¥á·¥Ä·¥ç', callback_data=f'setgs#is_stream#{settings.get("is_stream", IS_STREAM)}#{str(grp_id)}'),
            InlineKeyboardButton('‚úÖ ·¥è…¥' if settings.get("is_stream", IS_STREAM) else '‚ùå ·¥è“ì“ì', callback_data=f'setgs#is_stream#{settings.get("is_stream", IS_STREAM)}#{str(grp_id)}')
        ],[
            InlineKeyboardButton('‚ùå ·¥Ñ ü·¥ès·¥á ‚ùå', callback_data='close_data')
        ]]
        await message.reply_text(
            text=f"·¥Ñ ú·¥Ä…¥…¢·¥á  è·¥è·¥ú Ä s·¥á·¥õ·¥õ…™…¥…¢s “ì·¥è Ä <b>'{message.chat.title}'</b> ·¥Äs  è·¥è·¥ú Ä ·¥°…™s ú. ‚öô",
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=enums.ParseMode.HTML
        )
    else:
        await message.reply_text('s·¥è·¥ç·¥á·¥õ ú…™…¥…¢ ·¥°·¥á…¥·¥õ ·¥° Ä·¥è…¥…¢ !')

@Client.on_message(filters.command('set_template'))
async def save_template(client, message):
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply("<b> è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥  è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö !</b>")
    chat_type = message.chat.type
    if chat_type not in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        return await message.reply_text("·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥ò.")      
    grp_id = message.chat.id
    title = message.chat.title
    if not await is_check_admin(client, grp_id, message.from_user.id):
        return await message.reply_text(' è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò.')
    try:
        template = message.text.split(" ", 1)[1]
    except:
        return await message.reply_text("·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á !")   
    await save_group_settings(grp_id, 'template', template)
    await message.reply_text(f"s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ñ ú·¥Ä…¥…¢·¥á·¥Ö ·¥õ·¥á·¥ç·¥ò ü·¥Ä·¥õ·¥á “ì·¥è Ä {title} ·¥õ·¥è\n\n{template}")  
    
@Client.on_message(filters.command('set_caption'))
async def save_caption(client, message):
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply("<b> è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥  è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö !</b>")
    chat_type = message.chat.type
    if chat_type not in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        return await message.reply_text("·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥ò.")      
    grp_id = message.chat.id
    title = message.chat.title
    if not await is_check_admin(client, grp_id, message.from_user.id):
        return await message.reply_text(' è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò.')
    try:
        caption = message.text.split(" ", 1)[1]
    except:
        return await message.reply_text("·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á !") 
    await save_group_settings(grp_id, 'caption', caption)
    await message.reply_text(f"s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ñ ú·¥Ä…¥…¢·¥á·¥Ö ·¥Ñ·¥Ä·¥ò·¥õ…™·¥è…¥ “ì·¥è Ä {title} ·¥õ·¥è\n\n{caption}")
        
@Client.on_message(filters.command('set_shortlink'))
async def save_shortlink(client, message):
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply("<b> è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥  è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö !</b>")
    chat_type = message.chat.type
    if chat_type not in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        return await message.reply_text("·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥ò.")    
    grp_id = message.chat.id
    title = message.chat.title
    if not await is_check_admin(client, grp_id, message.from_user.id):
        return await message.reply_text(' è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò.')
    try:
        _, url, api = message.text.split(" ", 2)
    except:
        return await message.reply_text("<b>·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á :-\n\n…¢…™·¥†·¥á ·¥ç·¥á ·¥Ä s ú·¥è Ä·¥õ ü…™…¥·¥ã & ·¥Ä·¥ò…™ ·¥Ä ü·¥è…¥…¢ ·¥°…™·¥õ ú ·¥õ ú·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö...\n\n·¥áx :- <code>/shortlink mdisklink.link 5843c3cc645f5077b2200a2c77e0344879880b3e</code>")   
    try:
        await get_shortlink(url, api, f'https://t.me/{temp.U_NAME}')
    except:
        return await message.reply_text(" è·¥è·¥ú Ä s ú·¥è Ä·¥õ ü…™…¥·¥ã ·¥Ä·¥ò…™ ·¥è Ä ·¥ú Ä ü …™…¥·¥†·¥Ä ü…™·¥Ö, ·¥ò ü·¥á·¥Äs·¥á ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥Ä…¢·¥Ä…™…¥ !")   
    await save_group_settings(grp_id, 'url', url)
    await save_group_settings(grp_id, 'api', api)
    await message.reply_text(f"s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ñ ú·¥Ä…¥…¢·¥á·¥Ö s ú·¥è Ä·¥õ ü…™…¥·¥ã “ì·¥è Ä {title} ·¥õ·¥è\n\n·¥ú Ä ü - {url}\n·¥Ä·¥ò…™ - {api}")
    
@Client.on_message(filters.command('get_custom_settings'))
async def get_custom_settings(client, message):
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply("<b> è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥  è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö !</b>")
    chat_type = message.chat.type
    if chat_type not in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        return await message.reply_text("·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥ò.")
    grp_id = message.chat.id
    title = message.chat.title
    if not await is_check_admin(client, grp_id, message.from_user.id):
        return await message.reply_text(' è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò...')    
    settings = await get_settings(grp_id)
    text = f"""·¥Ñ·¥ús·¥õ·¥è·¥ç s·¥á·¥õ·¥õ…™…¥…¢s “ì·¥è Ä : {title}

s ú·¥è Ä·¥õ ü…™…¥·¥ã ·¥ú Ä ü : {settings["url"]}
s ú·¥è Ä·¥õ ü…™…¥·¥ã ·¥Ä·¥ò…™ : {settings["api"]}

…™·¥ç·¥Ö ô ·¥õ·¥á·¥ç·¥ò ü·¥Ä·¥õ·¥á : {settings['template']}

“ì…™ ü·¥á ·¥Ñ·¥Ä·¥ò·¥õ…™·¥è…¥ : {settings['caption']}

·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥áx·¥õ : {settings['welcome_text']}

·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü  ü…™…¥·¥ã : {settings['tutorial']}

“ì·¥è Ä·¥Ñ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á üs : {str(settings['fsub'])[1:-1] if settings['fsub'] else '…¥·¥è·¥õ s·¥á·¥õ'}"""

    btn = [[
        InlineKeyboardButton(text="·¥Ñ ü·¥ès·¥á", callback_data="close_data")
    ]]
    await message.reply_text(text, reply_markup=InlineKeyboardMarkup(btn), disable_web_page_preview=True)

@Client.on_message(filters.command('set_welcome'))
async def save_welcome(client, message):
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply("<b> è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥  è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö !</b>")
    chat_type = message.chat.type
    if chat_type not in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        return await message.reply_text("·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥ò.")      
    grp_id = message.chat.id
    title = message.chat.title
    if not await is_check_admin(client, grp_id, message.from_user.id):
        return await message.reply_text(' è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò.')
    try:
        welcome = message.text.split(" ", 1)[1]
    except:
        return await message.reply_text("·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á !")    
    await save_group_settings(grp_id, 'welcome_text', welcome)
    await message.reply_text(f"s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ñ ú·¥Ä…¥…¢·¥á·¥Ö ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á “ì·¥è Ä {title} ·¥õ·¥è\n\n{welcome}")
        
@Client.on_message(filters.command('delete') & filters.user(ADMINS))
async def delete_file(bot, message):
    try:
        query = message.text.split(" ", 1)[1]
    except:
        return await message.reply_text("·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á !\n·¥ús·¥Ä…¢·¥á : /delete ·¥èÃ®·¥ú·¥á Ä è")
    msg = await message.reply_text('s·¥á·¥Ä Ä·¥Ñ ú…™…¥…¢...')
    total, files = await delete_files(query)
    if int(total) == 0:
        return await msg.edit('…¥·¥è·¥õ  ú·¥Ä·¥†·¥á “ì…™ ü·¥ás …™…¥  è·¥è·¥ú Ä ·¥èÃ®·¥ú·¥á Ä è')
    btn = [[
        InlineKeyboardButton(" è·¥ás", callback_data=f"delete_{query}")
    ],[
        InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data="close_data")
    ]]
    await msg.edit(f"·¥õ·¥è·¥õ·¥Ä ü {total} “ì…™ ü·¥ás “ì·¥è·¥ú…¥·¥Ö …™…¥  è·¥è·¥ú Ä ·¥èÃ®·¥ú·¥á Ä è {query}.\n\n·¥Ö·¥è  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á ?", reply_markup=InlineKeyboardMarkup(btn))
 
@Client.on_message(filters.command('delete_all') & filters.user(ADMINS))
async def delete_all_index(bot, message):
    btn = [[
        InlineKeyboardButton(text=" è·¥ás", callback_data="delete_all")
    ],[
        InlineKeyboardButton(text="·¥Ñ ü·¥ès·¥á", callback_data="close_data")
    ]]
    files = await Media.count_documents()
    if int(files) == 0:
        return await message.reply_text('…¥·¥è·¥õ  ú·¥Ä·¥†·¥á “ì…™ ü·¥ás ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á')
    await message.reply_text(f'·¥õ·¥è·¥õ·¥Ä ü {files} “ì…™ ü·¥ás  ú·¥Ä·¥†·¥á.\n·¥Ö·¥è  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥Ä ü ü ?', reply_markup=InlineKeyboardMarkup(btn))

@Client.on_message(filters.command('set_tutorial'))
async def set_tutorial(client, message):
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply("<b> è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥  è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö !</b>")
    chat_type = message.chat.type
    if chat_type not in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        return await message.reply_text("·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥ò.")       
    grp_id = message.chat.id
    title = message.chat.title
    if not await is_check_admin(client, grp_id, message.from_user.id):
        return await message.reply_text(' è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò.')
    try:
        tutorial = message.text.split(" ", 1)[1]
    except:
        return await message.reply_text("·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á !")   
    await save_group_settings(grp_id, 'tutorial', tutorial)
    await message.reply_text(f"s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ñ ú·¥Ä…¥…¢·¥á·¥Ö ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü “ì·¥è Ä {title} ·¥õ·¥è\n\n{tutorial}")

@Client.on_message(filters.command('set_fsub'))
async def set_fsub(client, message):
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply("<b> è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥  è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö !</b>")
    chat_type = message.chat.type
    if chat_type not in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        return await message.reply_text("·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥ò.")      
    grp_id = message.chat.id
    title = message.chat.title
    if not await is_check_admin(client, grp_id, message.from_user.id):
        return await message.reply_text(' è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò.')
    vp = message.text.split(" ", 1)[1]
    if vp.lower() in ["Off", "off", "False", "false", "Turn Off", "turn off"]:
        await save_group_settings(grp_id, 'is_fsub', False)
        return await message.reply_text("s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥õ·¥ú Ä…¥·¥á·¥Ö ·¥è“ì“ì !")
    elif vp.lower() in ["On", "on", "True", "true", "Turn On", "turn on"]:
        await save_group_settings(grp_id, 'is_fsub', True)
        return await message.reply_text("s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥õ·¥ú Ä…¥·¥á·¥Ö ·¥è…¥ !")
    try:
        ids = message.text.split(" ", 1)[1]
        fsub_ids = list(map(int, ids.split()))
    except IndexError:
        return await message.reply_text("·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á !\n\n·¥Ñ·¥Ä…¥ ·¥ç·¥ú ü·¥õ…™·¥ò ü·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥Ä·¥Ö·¥Ö, s·¥á·¥ò·¥Ä Ä·¥Ä·¥õ·¥á  ô è s·¥ò·¥Ä·¥Ñ·¥ás.  ü…™·¥ã·¥á : /set_fsub …™·¥Ö1 …™·¥Ö2 …™·¥Ö3")
    except ValueError:
        return await message.reply_text('·¥ç·¥Ä·¥ã·¥á s·¥ú Ä·¥á …™·¥Ö …™s …™…¥·¥õ·¥á…¢·¥á Ä.')        
    channels = "·¥Ñ ú·¥Ä…¥…¥·¥á üs :\n"
    for id in fsub_ids:
        try:
            chat = await client.get_chat(id)
        except Exception as e:
            return await message.reply_text(f"{id} …™s …™…¥·¥†·¥Ä ü…™·¥Ö !\n·¥ç·¥Ä·¥ã·¥á s·¥ú Ä·¥á ·¥õ ú…™s  ô·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú·¥Ä·¥õ ·¥Ñ ú·¥Ä…¥…¥·¥á ü.\n\n·¥á Ä Ä·¥è Ä - {e}")
        if chat.type != enums.ChatType.CHANNEL:
            return await message.reply_text(f"{id} …™s …¥·¥è·¥õ ·¥Ñ ú·¥Ä…¥…¥·¥á ü.")
        channels += f'{chat.title}\n'
    await save_group_settings(grp_id, 'fsub', fsub_ids)
    await message.reply_text(f"s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è s·¥á·¥õ “ì·¥è Ä·¥Ñ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á üs “ì·¥è Ä {title} ·¥õ·¥è\n\n{channels}")

@Client.on_message(filters.command('ping'))
async def ping(client, message):
    start_time = time.monotonic()
    msg = await message.reply("üëÄ")
    end_time = time.monotonic()
    await msg.edit(f'{round((end_time - start_time) * 1000)} ·¥çs')
    
@Client.on_message(filters.command("add_premium"))
async def give_premium_cmd_handler(client, message):
    if message.from_user.id not in ADMINS:
        return
    if len(message.command) == 3:
        user_id = int(message.command[1])  # Convert the user_id to integer
        time = message.command[2]        
        seconds = await get_seconds(time)
        if seconds > 0:
            expiry_time = datetime.datetime.now() + datetime.timedelta(seconds=seconds)
            user_data = {"id": user_id, "expiry_time": expiry_time} 
            await db.update_user(user_data)  # Use the update_user method to update or insert user data
            await message.reply_text("·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥Ä·¥Ñ·¥Ñ·¥áss ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥õ·¥è ·¥õ ú·¥á ·¥ús·¥á Ä.")
            
            await client.send_message(
                chat_id=user_id,
                text=f"<b>·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥õ·¥è  è·¥è·¥ú Ä ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ Íú∞·¥è Ä {time} ·¥á…¥·¥ä·¥è è üòÄ\n</b>",                
            )
        else:
            await message.reply_text("…™…¥·¥†·¥Ä ü…™·¥Ö ·¥õ…™·¥ç·¥á “ì·¥è Ä·¥ç·¥Ä·¥õ. ·¥ò ü·¥á·¥Äs·¥á ·¥ús·¥á '1day “ì·¥è Ä ·¥Ö·¥Ä ès', '1hour “ì·¥è Ä  ú·¥è·¥ú Äs', '1min “ì·¥è Ä ·¥ç…™…¥·¥ú·¥õ·¥ás', '1month “ì·¥è Ä ·¥ç·¥è…¥·¥õ ús', '1year “ì·¥è Ä  è·¥á·¥Ä Äs'")
    else:
        await message.reply_text("<b>·¥ús·¥Ä…¢·¥á : /add_premium ·¥ús·¥á Ä…™·¥Ö ·¥õ…™·¥ç·¥á \n\n·¥áx·¥Ä·¥ç·¥ò ü·¥á /add_premium 1234567 10day \n\n( ·¥á.…¢. “ì·¥è Ä ·¥õ…™·¥ç·¥á ·¥ú…¥…™·¥õs '1day “ì·¥è Ä ·¥Ö·¥Ä ès', '1hour “ì·¥è Ä  ú·¥è·¥ú Äs', '1min “ì·¥è Ä ·¥ç…™…¥·¥ú·¥õ·¥ás', '1month “ì·¥è Ä ·¥ç·¥è…¥·¥õ ús', '1year “ì·¥è Ä  è·¥á·¥Ä Äs' )</b>")
        
@Client.on_message(filters.command("remove_premium"))
async def remove_premium_cmd_handler(client, message):
    if message.from_user.id not in ADMINS:
        return
    if len(message.command) == 2:
        user_id = int(message.command[1])  # Convert the user_id to integer
      #  time = message.command[2]
        time = "1s"
        seconds = await get_seconds(time)
        if seconds > 0:
            expiry_time = datetime.datetime.now() + datetime.timedelta(seconds=seconds)
            user_data = {"id": user_id, "expiry_time": expiry_time}  # Using "id" instead of "user_id"
            await db.update_user(user_data)  # Use the update_user method to update or insert user data
            await message.reply_text("·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥Ä·¥Ñ·¥Ñ·¥áss  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö ·¥õ·¥è ·¥õ ú·¥á ·¥ús·¥á Ä.")
            await client.send_message(
                chat_id=user_id,
                text=f"<b>·¥ò Ä·¥á·¥ç…™·¥ú·¥ç  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö  ô è ·¥Ä·¥Ö·¥ç…™…¥s \n\n ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥Ä·¥Ö·¥ç…™…¥ …™“ì ·¥õ ú…™s …™s ·¥ç…™s·¥õ·¥Ä·¥ã·¥á \n\n üëÆ ·¥Ä·¥Ö·¥ç…™…¥ : @cntct_7bot \n</b>",                
            )
        else:
            await message.reply_text("…™…¥·¥†·¥Ä ü…™·¥Ö ·¥õ…™·¥ç·¥á “ì·¥è Ä·¥ç·¥Ä·¥õ.'")
    else:
        await message.reply_text("·¥ús·¥Ä…¢·¥á: /remove_premium ·¥ús·¥á Ä…™·¥Ö")
        
@Client.on_message(filters.command("plans"))
async def plans_cmd_handler(client, message):                
    btn = [            
        [InlineKeyboardButton("Íú±·¥á…¥·¥Ö ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ  Ä·¥á·¥Ñ·¥á…™·¥ò·¥õ üßæ", url="https://t.me/cntct_7bot")],
        [InlineKeyboardButton("‚ö†Ô∏è ·¥Ñ ü·¥ès·¥á / ·¥Ö·¥á ü·¥á·¥õ·¥á ‚ö†Ô∏è", callback_data="close_data")]
    ]
    reply_markup = InlineKeyboardMarkup(btn)
    await message.reply_photo(
        photo=PAYMENT_QR,
        caption="**·¥ò Ä·¥á·¥ç…™·¥ú·¥ç “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás üéÅ\n\n‚òÜ …¥·¥è …¥·¥á·¥á·¥Ö ·¥õ·¥è ·¥†·¥á Ä…™“ì è\n‚òÜ ·¥Ä·¥Ö “ì Ä·¥á·¥á ·¥áx·¥ò·¥á Ä…™·¥á…¥·¥Ñ·¥á\n‚òÜ ·¥ú…¥ ü…™·¥ç…™·¥õ·¥á·¥Ö ·¥ç·¥è·¥†…™·¥á ·¥Ä…¥·¥Ö ·¥õ·¥† s·¥á Ä…™·¥ás",
        reply_markup=reply_markup
    )
        
@Client.on_message(filters.command("my_plan"))
async def check_plans_cmd(client, message):
    user_id  = message.from_user.id
    if await db.has_premium_access(user_id):         
        remaining_time = await db.check_remaining_uasge(user_id)             
        expiry_time = remaining_time + datetime.datetime.now()
        await message.reply_text(f"** è·¥è·¥ú Ä ·¥ò ü·¥Ä…¥s ·¥Ö·¥á·¥õ·¥Ä…™ üs ·¥Ä Ä·¥á :\n\n Ä·¥á·¥ç·¥Ä…™…¥…™…¥…¢ ·¥õ…™·¥ç·¥á : {remaining_time}\n\n·¥áx·¥ò…™ Ä·¥á ·¥õ…™·¥ç·¥á : {expiry_time}**")
    else:
        btn = [ 
            [InlineKeyboardButton("…¢·¥á·¥õ “ì Ä·¥á·¥á ·¥õ Ä·¥Ä…™ ü “ì·¥è Ä ùüª ·¥ç…™…¥·¥ú·¥õ·¥áÍú± ‚ò∫Ô∏è", callback_data="get_trail")],
            [InlineKeyboardButton(" ô·¥ú è s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ :  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ä·¥Ös", callback_data="buy_premium")],
            [InlineKeyboardButton("‚ö†Ô∏è ·¥Ñ ü·¥ès·¥á / ·¥Ö·¥á ü·¥á·¥õ·¥á ‚ö†Ô∏è", callback_data="close_data")]
        ]
        reply_markup = InlineKeyboardMarkup(btn)
        m=await message.reply_sticker("CAACAgIAAxkBAAIBTGVjQbHuhOiboQsDm35brLGyLQ28AAJ-GgACglXYSXgCrotQHjibHgQ")         
        await message.reply_text(f"**üò¢  è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥Ä…¥ è ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥.\n\n ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥è·¥ú·¥õ ·¥è·¥ú Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç /plans**",reply_markup=reply_markup)
        await asyncio.sleep(2)
        await m.delete()
